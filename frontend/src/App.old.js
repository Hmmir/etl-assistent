import React, { useState } from 'react';
import axios from 'axios';
import './App.css';

const API_BASE_URL = 'http://127.0.0.1:8000';

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [selectedFile, setSelectedFile] = useState(null);
  const [sourceDescription, setSourceDescription] = useState('');
  const [uploadStatus, setUploadStatus] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [pipeline, setPipeline] = useState(null);
  const [executionResult, setExecutionResult] = useState(null);
  const [isExecuting, setIsExecuting] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  const [infrastructureStatus, setInfrastructureStatus] = useState(null);
  const [isDeploying, setIsDeploying] = useState(false);
  const [deploymentResult, setDeploymentResult] = useState(null);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    setSelectedFile(file);
    setUploadStatus('');
    setPipeline(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleUpload = async () => {
    if (!selectedFile) {
      setUploadStatus('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }

    setIsLoading(true);
    setUploadStatus('');
    setExecutionResult(null);

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      const formData = new FormData();
      formData.append('file', selectedFile);
      formData.append('source_description', sourceDescription);

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
      const uploadResponse = await axios.post(`${API_BASE_URL}/upload`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setUploadStatus('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
      const pipelineResponse = await axios.post(`${API_BASE_URL}/generate_pipeline`, null, {
        params: { filename: uploadResponse.data.filename }
      });

      setPipeline({...pipelineResponse.data, filename: uploadResponse.data.filename});

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      setUploadStatus(`–û—à–∏–±–∫–∞: ${error.response?.data?.detail || error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
  const handleExecutePipeline = async () => {
    if (!pipeline || !pipeline.filename) {
      return;
    }

    setIsExecuting(true);
    setExecutionResult(null);

    try {
      const response = await axios.post(`${API_BASE_URL}/execute_pipeline/${pipeline.filename}`);
      setExecutionResult(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞:', error);
      setExecutionResult({
        status: 'error',
        message: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.response?.data?.detail || error.message}`,
        error: true
      });
    } finally {
      setIsExecuting(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
  const handleEditPipeline = () => {
    const editWindow = window.open('about:blank', '_blank');
    editWindow.document.write(`
      <html>
        <head>
          <title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .section { margin: 20px 0; padding: 15px; border: 1px solid #ccc; border-radius: 5px; }
            .section h3 { margin-top: 0; color: #333; }
            textarea { width: 100%; height: 200px; font-family: monospace; padding: 10px; }
            button { background: #007bff; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer; margin: 5px; }
            button:hover { background: #0056b3; }
            .info { background: #e7f3ff; padding: 10px; border-radius: 5px; margin: 10px 0; }
          </style>
        </head>
        <body>
          <h1>üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞</h1>
          <div class="info">
            <strong>–§–∞–π–ª:</strong> ${pipeline.filename}<br>
            <strong>–•—Ä–∞–Ω–∏–ª–∏—â–µ:</strong> ${pipeline.storage_recommendation}<br>
            <strong>–°—Ç–∞—Ç—É—Å:</strong> –ì–æ—Ç–æ–≤ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
          </div>
          
          <div class="section">
            <h3>üìù DDL —Å–∫—Ä–∏–ø—Ç</h3>
            <textarea id="ddl">${pipeline.ddl || 'DDL –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}</textarea>
            <button onclick="copyToClipboard('ddl')">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            <button onclick="downloadAsFile('ddl', 'create_table.sql')">üíæ –°–∫–∞—á–∞—Ç—å</button>
          </div>
          
          <div class="section">
            <h3>‚öôÔ∏è ETL –ø—Ä–æ—Ü–µ—Å—Å</h3>
            <textarea id="etl">${pipeline.etl_steps ? pipeline.etl_steps.join('\\n') : 'ETL —à–∞–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}</textarea>
            <button onclick="copyToClipboard('etl')">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            <button onclick="downloadAsFile('etl', 'etl_steps.txt')">üíæ –°–∫–∞—á–∞—Ç—å</button>
          </div>
          
          <div class="section">
            <h3>üí° –ò–ò –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
            <textarea id="explanation">${pipeline.explanation || '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</textarea>
            <button onclick="copyToClipboard('explanation')">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
          </div>
          
          <div class="section">
            <button onclick="applyChanges()" style="background: #28a745;">‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
            <button onclick="resetChanges()" style="background: #dc3545;">üîÑ –°–±—Ä–æ—Å–∏—Ç—å</button>
            <button onclick="window.close()" style="background: #6c757d;">‚ùå –ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
          
          <script>
            function copyToClipboard(elementId) {
              const element = document.getElementById(elementId);
              element.select();
              document.execCommand('copy');
              alert('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            }
            
            function downloadAsFile(elementId, filename) {
              const content = document.getElementById(elementId).value;
              const blob = new Blob([content], { type: 'text/plain' });
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = filename;
              a.click();
              window.URL.revokeObjectURL(url);
              alert('üíæ –§–∞–π–ª —Å–∫–∞—á–∞–Ω!');
            }
            
            function applyChanges() {
              alert('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! (–í production –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)');
            }
            
            function resetChanges() {
              if (confirm('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?')) {
                location.reload();
              }
            }
          </script>
        </body>
      </html>
    `);
  };

  // === INFRASTRUCTURE MANAGEMENT FUNCTIONS ===

  // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  const handleDeployInfrastructure = async () => {
    setIsDeploying(true);
    setDeploymentResult(null);

    try {
      const response = await axios.post(`${API_BASE_URL}/infrastructure/deploy`);
      setDeploymentResult(response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      checkInfrastructureStatus();
      
    } catch (error) {
      setDeploymentResult({
        success: false,
        error: error.response?.data?.detail || error.message
      });
    } finally {
      setIsDeploying(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  const checkInfrastructureStatus = async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/infrastructure/status`);
      setInfrastructureStatus(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error);
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  const handleStopInfrastructure = async () => {
    try {
      const response = await axios.post(`${API_BASE_URL}/infrastructure/stop`);
      setDeploymentResult(response.data);
      setInfrastructureStatus(null);
    } catch (error) {
      setDeploymentResult({
        success: false,
        error: error.response?.data?.detail || error.message
      });
    }
  };

  // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ DAG –≤ Airflow
  const handleDeployDAG = async () => {
    if (!executionResult?.filename) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DAG');
      return;
    }

    try {
      const response = await axios.post(
        `${API_BASE_URL}/infrastructure/deploy_dag?dag_name=${executionResult.filename}`
      );
      
      alert(response.data.message + '\n\n' + response.data.note);
      
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è DAG: ' + (error.response?.data?.detail || error.message));
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ Airflow UI
  const handleOpenAirflowUI = () => {
    window.open('http://localhost:8080', '_blank');
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    checkInfrastructureStatus();
  }, []);

  return (
    <div className="App">
      <header className="App-header">
        <h1>ü§ñ ETL Assistant</h1>
        <p>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–Ω–∂–µ–Ω–µ—Ä –¥–∞–Ω–Ω—ã—Ö</p>
      </header>

      <main className="App-main">
        <div className="upload-section">
          <h2>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
          
          {/* –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
          <div className="upload-form">
            <div className="file-input-group">
              <label htmlFor="file-input" className="file-input-label">
                –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (CSV, JSON, XML):
              </label>
              <input
                id="file-input"
                type="file"
                accept=".csv,.json,.xml"
                onChange={handleFileSelect}
                className="file-input"
              />
            </div>

            {selectedFile && (
              <div className="file-info">
                <p><strong>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:</strong> {selectedFile.name}</p>
                <p><strong>–†–∞–∑–º–µ—Ä:</strong> {(selectedFile.size / 1024 / 1024).toFixed(2)} MB</p>
              </div>
            )}

            <div className="description-input-group">
              <label htmlFor="source-description">
                –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
              </label>
              <textarea
                id="source-description"
                value={sourceDescription}
                onChange={(e) => setSourceDescription(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–µ–Ω–∏–π –º—É–∑–µ–µ–≤ –ú–æ—Å–∫–≤—ã –∑–∞ 2021-2025"
                rows="3"
                className="description-input"
              />
            </div>

            <button 
              onClick={handleUpload}
              disabled={!selectedFile || isLoading}
              className="upload-button"
            >
              {isLoading ? '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...' : 'üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω'}
            </button>
          </div>

          {/* –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {uploadStatus && (
            <div className={`status-message ${uploadStatus.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`}>
              {uploadStatus}
            </div>
          )}
        </div>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ */}
        {pipeline && (
          <div className="pipeline-section">
            <h2>üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω</h2>
            
            <div className="pipeline-card">
              <h3>üíæ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</h3>
              <div className="storage-recommendation">
                <strong>{pipeline.storage_recommendation}</strong>
                <p>{pipeline.reason}</p>
              </div>
            </div>

            <div className="pipeline-card">
              <h3>üèóÔ∏è DDL —Å–∫—Ä–∏–ø—Ç</h3>
              <pre className="code-block">
                <code>{pipeline.ddl}</code>
              </pre>
            </div>

            <div className="pipeline-card">
              <h3>‚öôÔ∏è ETL –ø—Ä–æ—Ü–µ—Å—Å</h3>
              <ol className="etl-steps">
                {pipeline.etl_steps.map((step, index) => (
                  <li key={index}>{step}</li>
                ))}
              </ol>
            </div>

            <div className="pipeline-card">
              <h3>üí° –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ò–ò</h3>
              <p className="explanation">{pipeline.explanation}</p>
            </div>

            <div className="pipeline-actions">
              <button 
                className="action-button primary"
                onClick={handleExecutePipeline}
                disabled={isExecuting}
              >
                {isExecuting ? '‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω'}
              </button>
              <button 
                className="action-button secondary"
                onClick={handleEditPipeline}
              >
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
          </div>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ */}
        {executionResult && (
          <div className="execution-section">
            <h2>üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
            
            {executionResult.error ? (
              <div className="pipeline-card error">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>{executionResult.message}</p>
              </div>
            ) : (
              <>
                <div className="pipeline-card success">
                  <h3>‚úÖ {executionResult.message}</h3>
                  <div className="execution-stats">
                    <div className="stat">
                      <span className="stat-label">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫:</span>
                      <span className="stat-value">{executionResult.pipeline_stats?.total_rows?.toLocaleString()}</span>
                    </div>
                    <div className="stat">
                      <span className="stat-label">–ö–æ–ª–æ–Ω–æ–∫:</span>
                      <span className="stat-value">{executionResult.pipeline_stats?.total_columns}</span>
                    </div>
                    <div className="stat">
                      <span className="stat-label">–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:</span>
                      <span className="stat-value">{executionResult.pipeline_stats?.file_size_mb} MB</span>
                    </div>
                    <div className="stat">
                      <span className="stat-label">–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</span>
                      <span className="stat-value">{executionResult.pipeline_stats?.execution_time}</span>
                    </div>
                    <div className="stat">
                      <span className="stat-label">–•—Ä–∞–Ω–∏–ª–∏—â–µ:</span>
                      <span className="stat-value">{executionResult.pipeline_stats?.recommended_storage}</span>
                    </div>
                  </div>
                </div>

                <div className="pipeline-card">
                  <h3>üìã –≠—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                  <div className="execution-stages">
                    {Object.entries(executionResult.pipeline_stages || {}).map(([stage, status]) => (
                      <div key={stage} className="stage-item">
                        <span className="stage-name">{stage.toUpperCase()}:</span>
                        <span className="stage-status">{status}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="pipeline-card">
                  <h3>üìÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã</h3>
                  <div className="generated-files">
                    {executionResult.generated_files?.map((file, index) => (
                      <div key={index} className="file-item">
                        üìÑ {file}
                      </div>
                    ))}
                  </div>
                </div>

                <div className="pipeline-card">
                  <h3>üîÑ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</h3>
                  
                  {/* –°—Ç–∞—Ç—É—Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã */}
                  <div className="infrastructure-status">
                    <h4>üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã</h4>
                    {infrastructureStatus ? (
                      <div className="services-grid">
                        {Object.entries(infrastructureStatus.services || {}).map(([service, info]) => (
                          <div key={service} className={`service-status ${info.status}`}>
                            <span className="service-name">{service.toUpperCase()}</span>
                            <span className={`status-badge ${info.status}`}>
                              {info.status === 'ready' ? '‚úÖ –ì–æ—Ç–æ–≤' : info.status === 'starting' ? '‚è≥ –ó–∞–ø—É—Å–∫' : '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                            </span>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p className="no-infrastructure">üî¥ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞</p>
                    )}
                  </div>

                  {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                  <div className="action-steps">
                    <div className="step-item">
                      <div className="step-content">
                        <h4>1. üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É</h4>
                        <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ClickHouse + PostgreSQL + Airflow —á–µ—Ä–µ–∑ Docker</p>
                      </div>
                      <button 
                        className="step-button primary"
                        onClick={handleDeployInfrastructure}
                        disabled={isDeploying || (infrastructureStatus?.services && Object.values(infrastructureStatus.services).some(s => s.status === 'ready'))}
                      >
                        {isDeploying ? '‚è≥ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...' : 'üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
                      </button>
                    </div>

                    <div className="step-item">
                      <div className="step-content">
                        <h4>2. üõ©Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å DAG –≤ Airflow</h4>
                        <p>–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DAG –≤ Airflow –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</p>
                      </div>
                      <button 
                        className="step-button secondary"
                        onClick={handleDeployDAG}
                        disabled={!infrastructureStatus?.services?.airflow || infrastructureStatus.services.airflow.status !== 'ready'}
                      >
                        üõ©Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å DAG
                      </button>
                    </div>

                    <div className="step-item">
                      <div className="step-content">
                        <h4>3. üìä –û—Ç–∫—Ä—ã—Ç—å Airflow UI</h4>
                        <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ETL –ø–∞–π–ø–ª–∞–π–Ω–∞–º–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</p>
                      </div>
                      <button 
                        className="step-button success"
                        onClick={handleOpenAirflowUI}
                        disabled={!infrastructureStatus?.services?.airflow || infrastructureStatus.services.airflow.status !== 'ready'}
                      >
                        üìä –û—Ç–∫—Ä—ã—Ç—å UI
                      </button>
                    </div>

                    <div className="step-item">
                      <div className="step-content">
                        <h4>4. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É</h4>
                        <p>–ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</p>
                      </div>
                      <button 
                        className="step-button danger"
                        onClick={handleStopInfrastructure}
                        disabled={!infrastructureStatus?.services}
                      >
                        üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                      </button>
                    </div>
                  </div>

                  {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è */}
                  {deploymentResult && (
                    <div className={`deployment-result ${deploymentResult.success ? 'success' : 'error'}`}>
                      <h4>{deploymentResult.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ!' : '‚ùå –û—à–∏–±–∫–∞'}</h4>
                      <p>{deploymentResult.message || deploymentResult.error}</p>
                      
                      {deploymentResult.success && deploymentResult.endpoints && (
                        <div className="endpoints-info">
                          <h5>üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:</h5>
                          <ul>
                            <li><strong>ClickHouse:</strong> {deploymentResult.endpoints.clickhouse_http}</li>
                            <li><strong>PostgreSQL:</strong> {deploymentResult.endpoints.postgres}</li>
                            <li><strong>Airflow UI:</strong> {deploymentResult.endpoints.airflow_ui}</li>
                          </ul>
                        </div>
                      )}
                    </div>
                  )}
                </div>

                {executionResult.deployment_ready && (
                  <div className="deployment-status">
                    üéâ <strong>–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!</strong> –í—Å–µ —Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
                  </div>
                )}
              </>
            )}
          </div>
        )}
      </main>

      <footer className="App-footer">
        <p>MVP –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ –î–ò–¢ –ú–æ—Å–∫–≤—ã ‚Ä¢ Powered by YandexGPT & Yandex Cloud</p>
      </footer>
    </div>
  );
}

export default App;